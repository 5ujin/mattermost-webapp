// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/threading/global_threads/thread_header should match snapshot 1`] = `
<Memo(ThreadHeader)
  actions={
    Object {
      "copyLink": [MockFunction],
      "follow": [MockFunction],
      "markRead": [MockFunction],
      "markUnread": [MockFunction],
      "openInChannel": [MockFunction],
      "save": [MockFunction],
      "unFollow": [MockFunction],
      "unSave": [MockFunction],
    }
  }
  channelName="This is a channel name"
  hasUnreads={false}
  isFollowing={false}
  isSaved={false}
>
  <header
    className="ThreadHeader"
  >
    <h3>
      <span
        className="separated"
      >
        Thread
      </span>
      <Memo(Button)
        className="separated"
        onClick={[MockFunction]}
      >
        <button
          className="Button Button___transparent separated"
          onClick={[MockFunction]}
        >
          <span
            className="Button_label"
          >
            This is a channel name
          </span>
        </button>
      </Memo(Button)>
    </h3>
    <div
      className="spacer"
    />
    <Memo(FollowButton)
      follow={[MockFunction]}
      isFollowing={false}
      unFollow={[MockFunction]}
    >
      <Memo(Button)
        isActive={false}
        onClick={[MockFunction]}
      >
        <button
          className="Button Button___transparent"
          onClick={[MockFunction]}
        >
          <span
            className="Button_label"
          >
            Follow
          </span>
        </button>
      </Memo(Button)>
    </Memo(FollowButton)>
    <Memo(ThreadMenu)
      actions={
        Object {
          "copyLink": [MockFunction],
          "follow": [MockFunction],
          "markRead": [MockFunction],
          "markUnread": [MockFunction],
          "openInChannel": [MockFunction],
          "save": [MockFunction],
          "unFollow": [MockFunction],
          "unSave": [MockFunction],
        }
      }
      hasUnreads={false}
      isFollowing={false}
      isSaved={false}
    >
      <MenuWrapper
        animationComponent={[Function]}
        className=""
        stopPropagationOnToggle={true}
      >
        <div
          className="MenuWrapper "
          onClick={[Function]}
        >
          <Memo(SimpleTooltip)
            content="More Actions"
            id="threadActionMenu"
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={500}
              overlay={
                <Tooltip
                  bsClass="tooltip"
                  className="hidden-xs"
                  id="threadActionMenu"
                  placement="top"
                >
                  More Actions
                </Tooltip>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <OverlayTrigger
                defaultOverlayShown={false}
                delayShow={500}
                overlay={
                  <OverlayWrapper
                    bsClass="tooltip"
                    className="hidden-xs"
                    id="threadActionMenu"
                    intl={
                      Object {
                        "defaultFormats": Object {},
                        "defaultLocale": "en",
                        "formatDate": [Function],
                        "formatDateToParts": [Function],
                        "formatDisplayName": [Function],
                        "formatList": [Function],
                        "formatMessage": [Function],
                        "formatNumber": [Function],
                        "formatNumberToParts": [Function],
                        "formatPlural": [Function],
                        "formatRelativeTime": [Function],
                        "formatTime": [Function],
                        "formatTimeToParts": [Function],
                        "formats": Object {},
                        "formatters": Object {
                          "getDateTimeFormat": [Function],
                          "getDisplayNames": [Function],
                          "getListFormat": [Function],
                          "getMessageFormat": [Function],
                          "getNumberFormat": [Function],
                          "getPluralRules": [Function],
                          "getRelativeTimeFormat": [Function],
                        },
                        "locale": "en",
                        "messages": Object {},
                        "onError": [Function],
                        "textComponent": "span",
                        "timeZone": "Etc/UTC",
                        "wrapRichTextChunksInFragment": undefined,
                      }
                    }
                    placement="top"
                  >
                    More Actions
                  </OverlayWrapper>
                }
                placement="top"
                trigger={
                  Array [
                    "hover",
                    "focus",
                  ]
                }
              >
                <Memo(Button)
                  className="Button___icon Button___large"
                  onBlur={[Function]}
                  onClick={null}
                  onFocus={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                >
                  <button
                    className="Button Button___transparent Button___icon Button___large"
                    onBlur={[Function]}
                    onClick={null}
                    onFocus={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                  >
                    <span
                      className="Button_label"
                    >
                      <i
                        className="Icon icon-dots-vertical"
                      />
                    </span>
                  </button>
                </Memo(Button)>
              </OverlayTrigger>
            </OverlayTrigger>
          </Memo(SimpleTooltip)>
          <MenuWrapperAnimation
            show={false}
          >
            <CSSTransition
              classNames="MenuWrapperAnimation"
              enter={true}
              exit={true}
              in={false}
              mountOnEnter={true}
              timeout={80}
              unmountOnExit={true}
            >
              <Transition
                appear={false}
                enter={true}
                exit={true}
                in={false}
                mountOnEnter={true}
                onEnter={[Function]}
                onEntered={[Function]}
                onEntering={[Function]}
                onExit={[Function]}
                onExited={[Function]}
                onExiting={[Function]}
                timeout={80}
                unmountOnExit={true}
              />
            </CSSTransition>
          </MenuWrapperAnimation>
        </div>
      </MenuWrapper>
    </Memo(ThreadMenu)>
  </header>
</Memo(ThreadHeader)>
`;
