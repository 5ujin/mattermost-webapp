// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// ***************************************************************
// - [#] indicates a test step (e.g. # Go to a page)
// - [*] indicates an assertion (e.g. * Check the title)
// - Use element ID when selecting an element. Create one if none.
// ***************************************************************

// Stage: @prod
// Group: @search

import * as TIMEOUTS from '../../fixtures/timeouts';

describe('Post search display', () => {
    let testTeam;
    let testUser;
    let adminUser;

    before(() => {
        // Initialise a user.
        cy.apiInitSetup({}).then(({team, user}) => {
            testTeam = team;
            testUser = user;
        });
    });

    beforeEach(() => {
        cy.apiAdminLogin().then((res) => {
            adminUser = res.user;
        });

        // Visit town square as an admin
        cy.visit(`/${testTeam.name}/channels/town-square`);
    });

    beforeEach(() => {
        cy.apiAdminLogin();

        // Visit town square as an admin
        cy.visit(`/${testTeam.name}/channels/town-square`);
    });

    it('S14252 After clearing search query, search options display', () => {
        const searchWord = 'Hello';

        // # Post a message
        cy.postMessage(searchWord);

        // # Search word in searchBox and validate searchWord
        cy.get('#searchBox').click().type(searchWord + '{enter}').should('have.value', searchWord);

        // # Click on "x" displayed on searchbox
        cy.get('#searchbarContainer').should('be.visible').within(() => {
            cy.get('#searchFormContainer').find('.input-clear-x').click({force: true});
            cy.get('#searchbar-help-popup').should('be.visible');
            cy.get('#searchFormContainer').type('{esc}');
        });

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // # Click on searchbox
        cy.get('#searchbarContainer').should('be.visible').within(() => {
            cy.get('#searchBox').click();
        });

        // * Check the contents in search options
        assertSearchHint();
    });

    it('MM-T350 - Searching displays results in RHS', () => {
        enableTestCommands(testTeam);

        const testSearch = '/test url test-search';

        // # Post a message
        cy.postMessage(testSearch);

        // # Search the world 'hello' that is generated by /test command
        cy.get('#searchBox').click().type('hello{enter}').wait(TIMEOUTS.HALF_SEC).should('have.value', 'hello');

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Verify different display formatting of the search results
        cy.get('[data-testid="search-item-container"]').first().then(($result) => {
            cy.wrap($result).contains('Basic word search: Hello world!');
            cy.wrap($result).get('h5.markdown__heading').contains('Hello');
            cy.wrap($result).get('.post-code.post-code--wrap code').contains('Hello');
            cy.wrap($result).contains('#hello');

            // # Jump to conversation
            cy.wrap($result).get('a.search-item__jump').first().click();

            // * Search query clear icon is still present
            cy.get('.input-clear.visible').should('be.visible');

            // # Hover search query clear icon
            cy.get('.input-clear-x').first().trigger('mouseover', {force: true}).then(($span) => {
                // * Assert that tooltip has shown
                cy.wrap($span).should('have.attr', 'aria-describedby', 'InputClearTooltip');

                // # Click the clear query icon
                cy.wrap($span).click({force: true});

                // * Assert search results are intact
                cy.get('[data-testid="search-item-container"]').should('be.visible');
            });
        });
    });

    it('MM-T376 - From:user search, using autocomplete', () => {
        const testMessage = 'Hello World';
        const testSearch = `FROM:${testUser.username.substring(0, 5)}`;

        cy.apiCreateUser().then(({user}) => {
            cy.apiAddUserToTeam(testTeam.id, user.id);
            cy.apiLogin(user);

            cy.apiGetChannelByName(testTeam.name, 'Off-Topic').then(({channel}) => {
                // # Have another user send a post
                cy.postMessageAs({sender: testUser, message: testMessage, channelId: channel.id});
            });

            // # Visit town-square.
            cy.visit(`/${testTeam.name}/channels/town-square`);

            // # Search for posts from that user
            cy.get('#searchBox').click().type(testSearch, {force: true});

            // # Select user from suggestion list
            cy.contains('.search-autocomplete__item', `@${testUser.username}`).scrollIntoView().click({force: true});

            // # Verify that search box has the updated query
            cy.get('#searchBox').should('have.value', `FROM:${testUser.username} `);

            // # Perform search
            cy.get('#searchBox').click().type('{enter}').wait(TIMEOUTS.HALF_SEC);

            // * Assert that RHS should be visible with search results
            cy.get('#search-items-container').should('be.visible');

            // * Search query clear icon is still present
            cy.get('.input-clear.visible').should('be.visible');

            // # Hover search query clear icon
            cy.get('.input-clear-x').first().trigger('mouseover', {force: true}).then(($span) => {
                // * Assert that tooltip has shown
                cy.wrap($span).should('have.attr', 'aria-describedby', 'InputClearTooltip');

                // # Click the clear query icon
                cy.wrap($span).click({force: true});

                // * Assert search results are intact
                cy.get('[data-testid="search-item-container"]').should('be.visible');
            });
        });
    });

    it('MM-T1450 - Autocomplete behaviour', () => {
        // # Post message in town-square
        cy.postMessage('hello');

        // # Click on searchbox
        cy.get('input#searchBox').should('be.visible').click();

        // * Check the contents in search options
        assertSearchHint();

        // # Search for search term in:
        cy.get('#searchBox').click().type('in:');

        // # Select option from suggestion list
        cy.get('.search-autocomplete__item').first().click({force: true});

        // * Assert suggestions are not present after selecting item
        cy.get('.search-autocomplete__item').should('not.be.visible');

        // # Clear search box
        cy.get('.input-clear-x').first().click({force: true}).wait(TIMEOUTS.HALF_SEC);

        // # Search for search term in:town-square{space}
        cy.get('#searchBox').click().type('in:town-square ').wait(TIMEOUTS.HALF_SEC);

        // * Check the hint contents are now visible
        assertSearchHint();

        // # Clear search box
        cy.get('.input-clear-x').first().click({force: true}).wait(TIMEOUTS.HALF_SEC);

        // # Search for search term in:town-square{enter}
        cy.get('#searchBox').click().type('in:town-square').wait(TIMEOUTS.HALF_SEC);

        // * Assert that channel name displays appropriately
        cy.get('.search-autocomplete__item').first().should('contain.text', 'Town Square~town-square');

        // # Press enter to register search term
        cy.get('#searchBox').type('{enter}');

        // * Check the hint contents are now visible
        assertSearchHint();

        // * Assert that searchBox now includes a trailing space
        cy.get('#searchBox').should('have.value', 'in:town-square ');

        // # Perform the search
        cy.get('#searchBox').type('{enter}').wait(TIMEOUTS.HALF_SEC);

        // * Assert autocomplete list is gone
        cy.get('.search-autocomplete__item').should('not.be.visible');
    });

    it('MM-T2286 - Clicking a hashtag from a message opens messages with that hashtag on RHS', () => {
        enableTestCommands(testTeam);

        const testSearch = '/test url test-search';

        // # Post message
        cy.postMessage(testSearch);

        // # Expand the test-search message
        cy.get('#showMoreButton').click().wait(TIMEOUTS.HALF_SEC);

        // # Click the #hello on the test-search message
        cy.get('[data-hashtag="#hello"]').first().click().wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Assert search results are present and correct
        cy.get('[data-testid="search-item-container"]').should('be.visible').should('contain.text', '#hello');
    });

    it('MM-T2291 - Wildcard Search', () => {
        const testMessage = 'Hello World!!!';

        // # Post message
        cy.postMessage(testMessage);

        // # Search for search term Hell*
        cy.get('input#searchBox').click().type('Hell*{enter}').wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Assert search results are present and correct
        cy.get('[data-testid="search-item-container"]').should('be.visible');
        cy.get('.search-highlight').first().should('contain.text', 'Hell');
    });

    it('MM-T2293 - Jump link shows archived view in center', () => {
        const testMessage = 'Hello World!!!';

        // # Post messages that can offset the initial message
        cy.postMessage(testMessage);

        for (let i = 0; i < 5; i++) {
            cy.postMessage('other Message');
        }

        // # Search for search term Hello
        cy.get('input#searchBox').click().type('Hello{enter}').wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // # Click Jump on the search result
        cy.get('.search-item__jump').first().click().wait(TIMEOUTS.HALF_SEC);

        // * Assert that jump is at the center
        cy.contains('[data-testid="postView"]', testMessage).then(($post) => {
            const coordinates = $post[0].getBoundingClientRect();
            expect(coordinates.bottom - coordinates.top - coordinates.height).to.eq(0);
        });
    });

    it('MM-T2294 - `in:` only returns results from specified channel Click to select auto-complete option', () => {
        const testMessage = 'inchannel';

        // # Post messages that can offset the initial message
        cy.postMessage(testMessage + ' #verify');

        cy.apiCreateUser().then(({user}) => {
            cy.apiAddUserToTeam(testTeam.id, user.id);
            cy.apiLogin(user);

            cy.apiGetChannelByName(testTeam.name, 'Off-Topic').then(({channel}) => {
                // # Have another user send a post
                cy.postMessageAs({sender: testUser, message: testMessage, channelId: channel.id});
            });
        });

        // # Search for search term
        cy.get('input#searchBox').click().type(`${testMessage} in:town-square{enter}{enter}`).wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Assert that results include only the verify message
        cy.get('.search-item__container .post.post--thread').each(($item) => {
            cy.wrap($item).should('contain.text', '#verify');
        });
    });

    it('MM-T2295 - `from:` only returns results posted by specified user Combine with search term Click to select auto-complete option', () => {
        const testMessage = 'fromuser';

        // # Post messages that can offset the initial message
        cy.postMessage(testMessage + ' #verify');

        cy.apiCreateUser().then(({user}) => {
            cy.apiAddUserToTeam(testTeam.id, user.id);
            cy.apiLogin(user);

            cy.apiGetChannelByName(testTeam.name, 'Off-Topic').then(({channel}) => {
                // # Have another user send a post
                cy.postMessageAs({sender: testUser, message: testMessage, channelId: channel.id});
            });
        });

        // # Search for search term
        cy.get('input#searchBox').click().type(`fromuser from:${adminUser.username}{enter}{enter}`).wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Assert that results include only the verify message
        cy.get('.search-item__container .post.post--thread').each(($item) => {
            cy.wrap($item).should('contain.text', '#verify');
        });
    });

    it('MM-T2298 - @ icon displays @-mentions of current user: - Public channel - DM - GM @ icon does not display @channel messages', () => {
        cy.apiCreateUser().then(({user}) => {
            cy.apiAddUserToTeam(testTeam.id, testUser.id);

            const groupMembers = [adminUser, user, testUser];

            // GM case with @mention
            cy.apiCreateGroupChannel(groupMembers.map((member) => member.id)).then(({channel}) => {
                cy.visit(`/${testTeam.name}/messages/${channel.name}`);

                const message = `Group message @${testUser.username}`;

                // # Post a GM message
                cy.postMessage(message);
            });
        });

        // Public channel @channel case
        cy.apiCreateChannel(testTeam.id, 'channel-mentions', 'channel-mentions').then(({channel}) => {
            cy.postMessageAs({sender: adminUser, message: '@channel', channelId: channel.id});
        });

        // Off-Topic with @mention
        cy.apiGetChannelByName(testTeam.name, 'Off-Topic').then(({channel}) => {
            // # Have another user send a post
            cy.postMessageAs({sender: adminUser, message: `@${testUser.username} greetings`, channelId: channel.id});
        });

        // DM case
        cy.apiCreateDirectChannel([testUser.id, adminUser.id]).then(({channel}) => {
            // # Send a DM with @mention
            cy.postMessageAs({sender: adminUser, message: `@${testUser.username} direct`, channelId: channel.id});
        });

        cy.apiLogin(testUser).then(() => {
            // # Visit town square as an admin
            cy.visit(`/${testTeam.name}/channels/town-square`);

            // # Click the @ mention filter on search
            cy.get('#channelHeaderMentionButton').click();

            // * RHS should be visible with search results
            cy.get('#search-items-container').should('be.visible');

            // * Assert that results include all messages apart from the @channel one
            cy.get('.search-item__container .post.post--thread .post__content .post__body').each(($item) => {
                expect($item.text()).to.match(new RegExp(`@${testUser.username} (direct|greetings)|Group message @${testUser.username}`));
            });
        });
    });

    it('MM-T2299 - Search results include matches in DMs', () => {
        cy.apiCreateDirectChannel([testUser.id, adminUser.id]).then(({channel}) => {
            // # Send a DM to another user
            cy.postMessageAs({sender: adminUser, message: 'This is direct', channelId: channel.id});
        });

        cy.apiLogin(testUser).then(() => {
            // # Visit town-square
            cy.visitAndWait(`/${testTeam.name}/channels/town-square`);

            // # Search for direct
            cy.get('input#searchBox').click().type('direct{enter}').wait(TIMEOUTS.HALF_SEC);

            // * RHS should be visible with search results
            cy.get('#search-items-container').should('be.visible');

            // * Assert that results include only the verify message
            cy.get('.search-item__container .post.post--thread').each(($item) => {
                cy.wrap($item).should('contain.text', 'This is direct');
            });
        });
    });

    it('MM-T2306 - Quotes cause exact phrase search', () => {
        cy.postMessage('hello to the whole world');

        // # Search for search term
        cy.get('input#searchBox').click().type('"hello world"{enter}').wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Assert that results are not present
        cy.get('.search-item__container .post.post--thread').should('not.be.visible');
    });

    it('MM-T1450 - Autocomplete behaviour', () => {
        // # Post message in town-square
        cy.postMessage('hello');

        // # Click on searchbox
        cy.get('input#searchBox').should('be.visible').click();

        // * Check the contents in search options
        assertSearchHint();

        // # Search for term in:
        cy.get('#searchBox').type('in:');

        // # Select option from suggestion list
        cy.get('.search-autocomplete__item').first().click({force: true});

        // * Assert suggestions are not present after selecting item
        cy.get('.search-autocomplete__item').should('not.be.visible');

        // # Clear search box
        cy.get('.input-clear-x').first().click({force: true}).wait(TIMEOUTS.HALF_SEC);

        // # Search for search term in:town-square{space}
        cy.get('#searchBox').click().type('in:town-square ').wait(TIMEOUTS.HALF_SEC);

        // * Check the hint contents are now visible
        assertSearchHint();

        // # Clear search box
        cy.get('.input-clear-x').first().click({force: true}).wait(TIMEOUTS.HALF_SEC);

        // # Search for search term in:town-square{enter}
        cy.get('#searchBox').click().type('in:town-square').wait(TIMEOUTS.HALF_SEC);

        // * Assert that channel name displays appropriately
        cy.get('.search-autocomplete__item').first().should('contain.text', 'Town Square~town-square');

        // # Press enter to register search term
        cy.get('#searchBox').type('{enter}');

        // * Check the hint contents are now visible
        assertSearchHint();

        // * Assert that searchBox now includes a trailing space
        cy.get('#searchBox').should('have.value', 'in:town-square ');

        // # Perform the search
        cy.get('#searchBox').type('{enter}').wait(TIMEOUTS.HALF_SEC);

        // * Assert autocomplete list is gone
        cy.get('.search-autocomplete__item').should('not.be.visible');
    });

    it('MM-T2286 - Clicking a hashtag from a message opens messages with that hashtag on RHS', () => {
        enableTestCommands(testTeam);

        const testSearch = '/test url test-search';

        // # Post message
        cy.postMessage(testSearch);

        // # Expand the test-search message
        cy.get('#showMoreButton').click().wait(TIMEOUTS.HALF_SEC);

        // # Click the #hello on the test-search message
        cy.get('[data-hashtag="#hello"]').first().click().wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Assert search results are present and correct
        cy.get('[data-testid="search-item-container"]').should('be.visible').should('contain.text', '#hello');
    });

    it('MM-T2291 - Wildcard Search', () => {
        const testMessage = 'Hello World!!!';

        // # Post message
        cy.postMessage(testMessage);

        // # Search for `Hell*`
        cy.get('input#searchBox').click().type('Hell*{enter}').wait(TIMEOUTS.HALF_SEC);

        // * RHS should be visible with search results
        cy.get('#search-items-container').should('be.visible');

        // * Assert search results are present and correct
        cy.get('[data-testid="search-item-container"]').should('be.visible');
        cy.get('.search-highlight').first().should('contain.text', 'Hell');
    });
});

const enableTestCommands = (team) => {
    // # Visit system console
    cy.visit('/admin_console/environment/developer');

    // # Enable testing commands
    cy.get('[data-testid="ServiceSettings.EnableTestingtrue"]').click();

    // # Save changes
    cy.get('[data-testid="saveSetting"]').should('be.visible').then(($btn) => {
        if (!$btn.is(':disabled')) {
            cy.wrap($btn).click().wait(TIMEOUTS.HALF_SEC);
        }

        // # Visit town-square
        cy.visit(`/${team.name}/channels/town-square`);
    });
};

const assertSearchHint = () => {
    cy.get('#searchbar-help-popup').should('be.visible').within(() => {
        cy.get('h4 span').first().should('have.text', 'Search Options');
        cy.get('div ul li').first().should('have.text', 'From:Messages from a user');
        cy.get('div ul li').eq(1).should('have.text', 'In:Messages in a channel');
        cy.get('div ul li').eq(2).should('have.text', 'On:Messages on a date');
        cy.get('div ul li').eq(3).should('have.text', 'Before:Messages before a date');
        cy.get('div ul li').eq(4).should('have.text', 'After:Messages after a date');
        cy.get('div ul li').eq(5).should('have.text', '—Exclude search terms');
        cy.get('div ul li').last().should('have.text', '""Messages with phrases');
    });
};
